# -*- coding: utf-8 -*-
"""plot_results.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pAzbvnT_34FpyPJwXvW84pvGkg_WFuel
"""

import matplotlib.pyplot as plt
import seaborn
import numpy as np
import pandas.util.testing as tm
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.metrics import precision_recall_curve, auc, roc_auc_score
from sklearn.metrics import confusion_matrix,classification_report


def plot_acc(history, name_file, save_fig=True):

  """Plot results for the keras history for accuracy  .

  Args:
      history: object from Keras 
      name_file (str): Path to output file.
      save_fig (Bool): True or Not for salve figure

  """
  plt.plot(history.history['acc'])
  plt.plot(history.history['val_acc'])
  plt.title('Model accuracy')
  plt.ylabel('Accuracy')
  plt.xlabel('Epoch')
  plt.legend(['Train', 'Val'], loc='upper left')
  if save_fig:
    plt.savefig((name_file + "_acc.png"), format = 'png')
  plt.show()

def plot_loss(history,name_file,save_fig=True):
  """Plot results for the keras history for loss  .

    Args:
      history: object from Keras 
      name_file (str): Path to output file.
      save_fig (Bool): True or Not for salve figure

    """

  plt.plot(history.history['loss'])
  plt.plot(history.history['val_loss'])
  plt.title('Model loss')
  plt.ylabel('Loss')
  plt.xlabel('Epoch')
  plt.legend(['Train', 'Val'], loc='upper left')
  if save_fig:
    plt.savefig((name_file +"_loss.png"), format = 'png')
  plt.show()

def plot_confusion_matrix(data, labels, output_filename, save_fig=True):

    """Plot confusion matrix using heatmap.
 
    Args:
        data (list of list): List of lists with confusion matrix data.
        labels (list): Labels which will be plotted across x and y axis.
        output_filename (str): Path to output file.
        save_fig (Bool): True or Not for salve figure
 
    """
    seaborn.set(color_codes=True)
    plt.figure(1, figsize=(9, 6))
 
    plt.title("Confusion Matrix")
 
    seaborn.set(font_scale=1)
    ax = seaborn.heatmap(data, annot=True,fmt="d", cmap="YlGnBu", cbar_kws={'label': 'Scale'})
 
    ax.set_xticklabels(labels)
    ax.set_yticklabels(labels)
 
    ax.set(ylabel="True Label", xlabel="Predicted Label")
    if save_fig:
      plt.savefig(output_filename, bbox_inches='tight', dpi=300)

    plt.show()
    plt.close()


def mis_metricas(predict, labels, dirName):

  """Plot results for the predict data .

  Args:
      data (list of list): List of lists with confusion matrix data.
      labels (list): Labels which will be plotted across x and y axis.
      output_filename (str): Path to output file.
      save_fig (Bool): True or Not for salve figure

  """

  y_test_non_category = [np.argmax(t) for t in labels]
  y_predict_non_category = [np.argmax(t) for t in predict]
  precision, recall, thresholds = precision_recall_curve(y_test_non_category,
                                                          y_predict_non_category, pos_label=1)
  auprc = auc(recall, precision)
  auroc = roc_auc_score(labels, predict,multi_class='ovr')
  print()
  print('auroc %f e auprc %f'% (auroc, auprc))
  print()

  # if num_classes == 2:
  #   nomlabels = ['0','1']
  # else:
  nomlabels = ['0','1', '-1']

  cm = confusion_matrix(y_test_non_category, y_predict_non_category)

  print(cm)
  print()

  report = classification_report(y_test_non_category,
                                y_predict_non_category,target_names=nomlabels)
  print(report)

  # create confusion matrix
  plot_confusion_matrix(cm, nomlabels, dirName +"_confu_matriz.png")

